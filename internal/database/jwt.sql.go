// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: jwt.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const isTokenRevoked = `-- name: IsTokenRevoked :one
SELECT EXISTS(
  SELECT TRUE FROM revoked_tokens WHERE jti = $1
)
`

func (q *Queries) IsTokenRevoked(ctx context.Context, jti uuid.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, isTokenRevoked, jti)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const revokeJwt = `-- name: RevokeJwt :one
INSERT INTO revoked_tokens (jti, user_id, expires_at)
VALUES ($1, $2, $3)
returning jti, user_id, created_at, expires_at
`

type RevokeJwtParams struct {
	Jti       uuid.UUID
	UserID    uuid.UUID
	ExpiresAt time.Time
}

func (q *Queries) RevokeJwt(ctx context.Context, arg RevokeJwtParams) (RevokedToken, error) {
	row := q.db.QueryRow(ctx, revokeJwt, arg.Jti, arg.UserID, arg.ExpiresAt)
	var i RevokedToken
	err := row.Scan(
		&i.Jti,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
